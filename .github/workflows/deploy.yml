name: Deploy to GCP

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]
  workflow_dispatch:

jobs:
  deploy:
    # Only run on push to main branch or when PR is merged
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch')

    runs-on: ubuntu-latest

    steps:
    # Configure SSH key and known_hosts for the runner
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.GCP_SSH_KEY }}
        known_hosts: unnecessary
        if_key_exists: replace

    # Add server public key to known_hosts
    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.GCP_VM_IP }} >> ~/.ssh/known_hosts

    - name: Deploy to GCP
      env: # Environment variables for deployment
        HOST: ${{ secrets.GCP_VM_IP }}
        USER: ${{ secrets.GCP_VM_USER }}
        PROJECT_NAME: Plantopia
        PROJECT_PATH: /opt/plantopia/Plantopia
      run: |
        # Create deployment script
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e

        echo "üöÄ Starting deployment to GCP server..."

        # SSH to server and execute deployment
        ssh $USER@$HOST << 'ENDSSH'
        # Check and enter project directory
        if [ ! -d "/opt/plantopia/Plantopia" ]; then
          echo "‚ùå Project directory /opt/plantopia/Plantopia does not exist"
          exit 1
        fi

        cd /opt/plantopia/Plantopia
        echo "üìÇ Current directory: $(pwd)"

        echo "üì• Pulling latest code..."
        # Ensure we're on the correct branch
        git fetch --prune origin
        git checkout main 2>/dev/null || git checkout -b main origin/main
        git reset --hard origin/main

        echo "üêç Activating Python environment..."
        source venv/bin/activate

        echo "üì¶ Installing dependencies..."
        # Use the dependency fix script to ensure clean installation
        if [ -f "fix_dependencies.sh" ]; then
          echo "üîß Running dependency fix script..."
          chmod +x fix_dependencies.sh
          ./fix_dependencies.sh
        else
          echo "‚ö†Ô∏è  fix_dependencies.sh not found, using pip install..."
          pip install -q -r requirements.txt
        fi

        echo "üóÑÔ∏è  Running database migrations..."
        alembic upgrade head

        echo "üîÑ Restarting application..."
        sudo supervisorctl restart plantopia

        # Wait for service to start
        echo "‚è≥ Waiting for service to start..."
        sleep 30

        # Check process status
        if ! sudo supervisorctl status plantopia | grep -q RUNNING; then
          echo "‚ùå Application failed to start"
          echo "üìã Application logs (last 100 lines):"
          sudo supervisorctl tail -100 plantopia
          exit 1
        fi

        # Check service status locally on server
        echo "üîç Checking service status..."
        MAX_RETRIES=3
        RETRY_COUNT=0
        SUCCESS=false

        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          if curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/docs | grep -q "200"; then
            echo "‚úÖ Service is running"
            SUCCESS=true
            break
          else
            echo "‚è≥ Attempt $((RETRY_COUNT + 1)) failed, waiting 5 seconds before retry..."
            sleep 5
            RETRY_COUNT=$((RETRY_COUNT + 1))
          fi
        done

        if [ "$SUCCESS" = false ]; then
          echo "‚ö†Ô∏è Health check failed, but application process is running"
          echo "üìã Application logs (last 50 lines):"
          sudo supervisorctl tail -50 plantopia
          echo "üîç Please check manually: http://$HOST/docs"
        fi

        # Get deployment information
        COMMIT_HASH=$(git rev-parse --short HEAD)
        BRANCH_NAME=$(git branch --show-current)

        echo ""
        echo "‚úÖ Deployment completed!"
        echo "üìã Deployment information:"
        echo "  - Branch: $BRANCH_NAME"
        echo "  - Commit: $COMMIT_HASH"
        echo "  - Time: $(date '+%Y-%m-%d %H:%M:%S %Z')"
        ENDSSH
        EOF

        chmod +x deploy.sh
        ./deploy.sh # Execute deployment script

    # Health check is done in deployment script, additional validation can be added here
    - name: Deployment Summary
      run: |
        echo "‚úÖ Deployment process completed!"
        echo "üìã Deployment Information:"
        echo "  - Server: ${{ secrets.GCP_VM_IP }}"
        echo "  - Project path: /opt/plantopia/Plantopia"
        echo "  - Python version: 3.10"
        echo "  - Deployment time: $(date '+%Y-%m-%d %H:%M:%S %Z')"
        echo "  - Access URL: http://${{ secrets.GCP_VM_IP }}"
        echo "  - API Documentation: http://${{ secrets.GCP_VM_IP }}/docs"