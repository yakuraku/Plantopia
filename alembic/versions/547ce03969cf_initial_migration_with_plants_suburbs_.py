"""Initial migration with plants, suburbs, climate data tables

Revision ID: 547ce03969cf
Revises: 
Create Date: 2025-09-11 18:58:00.056684

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '547ce03969cf'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('api_cache',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('api_name', sa.String(length=100), nullable=False),
    sa.Column('last_update', sa.DateTime(), nullable=True),
    sa.Column('last_success', sa.DateTime(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('response_time_ms', sa.Integer(), nullable=True),
    sa.Column('records_updated', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('api_name')
    )
    op.create_index(op.f('ix_api_cache_id'), 'api_cache', ['id'], unique=False)
    op.create_table('plants',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('plant_name', sa.String(length=255), nullable=False),
    sa.Column('scientific_name', sa.String(length=255), nullable=True),
    sa.Column('plant_category', sa.String(length=50), nullable=True),
    sa.Column('water_requirements', sa.String(length=100), nullable=True),
    sa.Column('sunlight_requirements', sa.String(length=100), nullable=True),
    sa.Column('soil_type', sa.String(length=200), nullable=True),
    sa.Column('growth_time', sa.String(length=100), nullable=True),
    sa.Column('maintenance_level', sa.String(length=50), nullable=True),
    sa.Column('climate_zone', sa.String(length=100), nullable=True),
    sa.Column('mature_height', sa.String(length=100), nullable=True),
    sa.Column('mature_width', sa.String(length=100), nullable=True),
    sa.Column('flower_color', sa.String(length=200), nullable=True),
    sa.Column('flowering_season', sa.String(length=200), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('planting_tips', sa.Text(), nullable=True),
    sa.Column('care_instructions', sa.Text(), nullable=True),
    sa.Column('companion_plants', sa.Text(), nullable=True),
    sa.Column('image_url', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_plant_category_name', 'plants', ['plant_category', 'plant_name'], unique=False)
    op.create_index(op.f('ix_plants_id'), 'plants', ['id'], unique=False)
    op.create_index(op.f('ix_plants_plant_category'), 'plants', ['plant_category'], unique=False)
    op.create_index(op.f('ix_plants_plant_name'), 'plants', ['plant_name'], unique=False)
    op.create_table('suburbs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('postcode', sa.String(length=10), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=False),
    sa.Column('longitude', sa.Float(), nullable=False),
    sa.Column('state', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_suburbs_id'), 'suburbs', ['id'], unique=False)
    op.create_index(op.f('ix_suburbs_name'), 'suburbs', ['name'], unique=True)
    op.create_table('climate_data',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('suburb_id', sa.Integer(), nullable=False),
    sa.Column('temperature_current', sa.Float(), nullable=True),
    sa.Column('temperature_max', sa.Float(), nullable=True),
    sa.Column('temperature_min', sa.Float(), nullable=True),
    sa.Column('humidity', sa.Integer(), nullable=True),
    sa.Column('rainfall', sa.Float(), nullable=True),
    sa.Column('wind_speed', sa.Float(), nullable=True),
    sa.Column('weather_code', sa.Integer(), nullable=True),
    sa.Column('uv_index', sa.Float(), nullable=True),
    sa.Column('uv_category', sa.String(length=50), nullable=True),
    sa.Column('uv_protection_required', sa.String(length=10), nullable=True),
    sa.Column('air_quality_index', sa.Integer(), nullable=True),
    sa.Column('air_quality_category', sa.String(length=50), nullable=True),
    sa.Column('pm25', sa.Float(), nullable=True),
    sa.Column('pm10', sa.Float(), nullable=True),
    sa.Column('ozone', sa.Float(), nullable=True),
    sa.Column('nitrogen_dioxide', sa.Float(), nullable=True),
    sa.Column('sulfur_dioxide', sa.Float(), nullable=True),
    sa.Column('carbon_monoxide', sa.Float(), nullable=True),
    sa.Column('recorded_date', sa.Date(), nullable=False),
    sa.Column('data_source', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['suburb_id'], ['suburbs.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('suburb_id', 'recorded_date', name='unique_suburb_date')
    )
    op.create_index('idx_climate_suburb_date', 'climate_data', ['suburb_id', 'recorded_date'], unique=False)
    op.create_index(op.f('ix_climate_data_id'), 'climate_data', ['id'], unique=False)
    op.create_table('user_recommendations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('suburb_id', sa.Integer(), nullable=True),
    sa.Column('preferences', sa.JSON(), nullable=True),
    sa.Column('recommended_plants', sa.JSON(), nullable=True),
    sa.Column('request_ip', sa.String(length=50), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('response_time_ms', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['suburb_id'], ['suburbs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_recommendations_created', 'user_recommendations', ['created_at'], unique=False)
    op.create_index(op.f('ix_user_recommendations_id'), 'user_recommendations', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_recommendations_id'), table_name='user_recommendations')
    op.drop_index('idx_recommendations_created', table_name='user_recommendations')
    op.drop_table('user_recommendations')
    op.drop_index(op.f('ix_climate_data_id'), table_name='climate_data')
    op.drop_index('idx_climate_suburb_date', table_name='climate_data')
    op.drop_table('climate_data')
    op.drop_index(op.f('ix_suburbs_name'), table_name='suburbs')
    op.drop_index(op.f('ix_suburbs_id'), table_name='suburbs')
    op.drop_table('suburbs')
    op.drop_index(op.f('ix_plants_plant_name'), table_name='plants')
    op.drop_index(op.f('ix_plants_plant_category'), table_name='plants')
    op.drop_index(op.f('ix_plants_id'), table_name='plants')
    op.drop_index('idx_plant_category_name', table_name='plants')
    op.drop_table('plants')
    op.drop_index(op.f('ix_api_cache_id'), table_name='api_cache')
    op.drop_table('api_cache')
    # ### end Alembic commands ###
